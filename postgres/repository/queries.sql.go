// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package repository

import (
	"context"

	geom "github.com/twpayne/go-geom"
)

const addPerson = `-- name: AddPerson :one
INSERT INTO person (name, age, location) VALUES ($1, $2, $3) RETURNING id, name, age, location
`

type AddPersonParams struct {
	Name     string
	Age      int32
	Location geom.T
}

func (q *Queries) AddPerson(ctx context.Context, arg AddPersonParams) (Person, error) {
	row := q.db.QueryRow(ctx, addPerson, arg.Name, arg.Age, arg.Location)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Location,
	)
	return i, err
}

const allPersons = `-- name: AllPersons :many
SELECT id, name, age, location FROM person
`

func (q *Queries) AllPersons(ctx context.Context) ([]Person, error) {
	rows, err := q.db.Query(ctx, allPersons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPerson = `-- name: GetPerson :one
SELECT id, name, age, location FROM person WHERE id = $1
`

func (q *Queries) GetPerson(ctx context.Context, id int32) (Person, error) {
	row := q.db.QueryRow(ctx, getPerson, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Location,
	)
	return i, err
}
